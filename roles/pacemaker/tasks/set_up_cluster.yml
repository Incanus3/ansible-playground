---
- set_fact:
    hosts_with_role:
      "{{ groups[cluster.role_group] }}"
    hosts_in_network_group:
      "{{ hostvars | dict2items
        | selectattr('value.network_group', 'eq', cluster.network_group)
        | map(attribute = 'key') | list }}"
- set_fact:
    hosts_in_cluster: "{{ hosts_with_role | intersect(hosts_in_network_group) }}"

- block:
    - debug:
        msg: |-
          setting up pacemaker for network group {{ cluster.network_group }} and role {{ cluster.role_group }}
          hosts with role: {{ hosts_with_role }}
          hosts in network group: {{ hosts_in_network_group }}
          hosts in cluster: {{ hosts_in_cluster }}
      run_once: true

    - name: install python expect library
      apt: name=python3-pexpect state=present

    - name: install pacemaker packages
      apt: name=pacemaker,pacemaker-cli-utils,pcs,psmisc state=present
    - name: allow connections to necessary ports
      ufw: rule=allow proto={{ item.proto }} port={{ item.port }} src={{ ansible_facts.eth1 | iface_to_subnet_cidr }}
      with_items:
        - { proto: 'tcp', port: 2224  }
        - { proto: 'tcp', port: 3121  }
        - { proto: 'tcp', port: 21064 }
        - { proto: 'udp', port: 5405  }
    - name: enable pacemaker services
      service: name={{ item }} enabled=yes
      with_items: [corosync, pacemaker, pcsd]
    - name: start pcs daemon
      service: name=pcsd state=started

    - name: check if hacluster has set password
      shell: passwd --status hacluster | cut -f 2 -d ' '
      register: hacluster_password_status
      check_mode: no
      changed_when: false
    - name: set hacluster password if not set
      expect:
        command: passwd hacluster
        responses:
          (?i)password: "{{ pacemaker_hacluster_password }}"
      when: hacluster_password_status.stdout == 'L'

    - name: check for initial (after-install) cluster
      command: pcs status
      register: pcs_status_initial
      check_mode: no
      failed_when: false
      changed_when: false

    - name: destroy initial cluster
      command: pcs cluster destroy
      when: "'Cluster name: debian' in pcs_status_initial.stdout_lines"

    - debug: var=hosts_in_cluster

    - block:
        - name: check for existing cluster
          command: pcs status
          register: pcs_status
          check_mode: no
          failed_when: false
          changed_when: false

        - block:
            - name: authenticate all nodes in cluster with each other
              command: >-
                pcs cluster auth {{ hosts_in_cluster | join(' ') }}
                -u "{{ pacemaker_hacluster_username | default('hacluster') }}"
                -p "{{ pacemaker_hacluster_password }}"
              register: result
              changed_when: result.stdout_lines | reject('search', 'Already authorized') | list

            - name: initialize cluster
              command: pcs cluster setup --name "{{ cluster.name }}" {{ hosts_in_cluster | join(' ') }}

            - name: start cluster
              command: pcs cluster start --all

            - name: disable fencing (for now)
              command: pcs property set stonith-enabled=false
              retries: 3
              delay: 1
              register: result
              until: result.rc == 0

          when: "'Cluster name: ' + cluster.name not in pcs_status.stdout_lines"

        - name: get existing resources
          command: pcs resource show
          register: pcs_resources
          check_mode: no
          changed_when: false

        - set_fact:
            existing_cluster_resources: "{{ pcs_resources.stdout_lines | map('split') | map('first') | list }}"

        - include_tasks: set_up_resource.yml
          when: resource.name not in existing_cluster_resources
          loop: "{{ cluster.resources }}"
          loop_control:
            loop_var: resource

      when: inventory_hostname == hosts_in_cluster[0]

  when: hosts_in_cluster | length > 1 and inventory_hostname in hosts_in_cluster
