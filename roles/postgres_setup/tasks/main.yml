---
# this role support three setups
# - cluster with automatic failover (e.g. using PAF)
#   - postgresql_cluster_ip is defined
#   - postgresql_replication_user, _password and _port are the same for the whole cluster
# - static setup (one dedicated master)
#   - postgresql_replication_master is defined
#   - postgresql_replication_user, _password and _port are taken from master's hostvars
# - no replication
#   - neither postgresql_cluster_ip, nor postgresql_replication_master is defined

- become: yes

  block:
    - name: add common options to postgresql configuration
      set_fact:
        postgresql_global_config_options:
          "{{ postgresql_global_config_options + common_options }}"

    - name: add replication master options to postgresql configuration
      set_fact:
        postgresql_global_config_options:
          "{{ postgresql_global_config_options + replication_master_options }}"
      when: postgresql_cluster_ip is defined or
           (postgresql_replication_master is defined and inventory_hostname == postgresql_replication_master)

    - name: add replication slave options to postgresql configuration
      set_fact:
        postgresql_global_config_options:
          "{{ postgresql_global_config_options + replication_slave_options }}"
      when: postgresql_cluster_ip is defined or
           (postgresql_replication_master is defined and inventory_hostname != postgresql_replication_master)

    - name: allow replication connections
      set_fact:
        postgresql_hba_entries:
          "{{ postgresql_hba_entries + replication_hba_entries }}"
        postgresql_users:
          - name:     "{{ postgresql_replication_user }}"
            password: "{{ postgresql_replication_password }}"
            role_attr_flags: REPLICATION
      when: postgresql_cluster_ip is defined or
           (postgresql_replication_master is defined and inventory_hostname == postgresql_replication_master)

    - import_role: name=geerlingguy.postgresql

    - name: create backup directory
      file:
        state: directory
        path:  "{{ postgresql_backups_dir }}"
        owner: "{{ postgresql_user  }}"
        group: "{{ postgresql_group }}"
        mode:  0770

    - name: add firewall rules
      ufw: rule=allow proto=tcp src={{ item.address }} port={{ postgresql_port | string }}
      with_items: "{{ allowed_clients_ipv4 + replication_clients_ipv4 }}"

  vars:
    postgresql_iface_address:
      "{{ postgresql_iface and hostvars[inventory_hostname]['ansible_facts'][postgresql_iface]['ipv4']['address'] }}"
    postgresql_listen_addresses:
      "{{ (['127.0.0.1', postgresql_iface_address,
            postgresql_cluster_ip is defined and postgresql_cluster_ip | ipaddr('address')]
        + postgresql_additional_listen_addresses) | compact | unique }}"

    allowed_clients_ipv4:
      "{{ postgresql_allowed_clients
        | difference([inventory_hostname])
        | map('extract', hostvars, ['ansible_facts', postgresql_iface, 'ipv4'])
        | list }}"
    postgresql_hba_entries:
      "{{ allowed_clients_ipv4
        | map('ipv4_to_hba')
        | list
        | add_base_hba_entries }}"

    replication_clients_ipv4:
      "{{ postgresql_replication_clients
        | difference([inventory_hostname])
        | map('extract', hostvars, ['ansible_facts', postgresql_iface, 'ipv4'])
        | list }}"
    accept_replication_hba_entries:
      "{{ replication_clients_ipv4
        | map('ipv4_to_hba', database = 'replication', user = postgresql_replication_user)
        | list
        | add_base_replication_hba_entries }}"
    reject_self_replication_hba_entry:
      "{{ ansible_facts[postgresql_iface]['ipv4']
        | ipv4_to_hba(database = 'replication', user = postgresql_replication_user, auth_method = 'reject') }}"
    replication_hba_entries:
      "{{ accept_replication_hba_entries + [reject_self_replication_hba_entry] }}"

    common_options:
      - option: 'listen_addresses'
        value:  "{{ postgresql_listen_addresses | join(',') }}"
      - option: 'logging_collector'
        value:  'on'
      - option: 'log_min_messages'
        value:  'info'
      - option: 'log_min_error_statement'
        value:  'notice'
      - option: 'log_timezone'
        value:  'Europe/Prague'

    replication_master_options:
      - option: 'wal_level'
        value:  'replica'
      - option: 'wal_log_hints'
        value:  'on'
      - option: 'wal_keep_segments'
        value:  "{{ postgresql_wal_keep_segments }}"
      - option: 'archive_mode'
        value:  'on'
      - option: 'archive_timeout'
        value:  "{{ postgresql_wal_timeout }}"
      - option: 'archive_command'
        value:  "{{ postgresql_archive_command }}"

    replication_slave_options:
      - option: 'hot_standby'
        value:  'on'
      - option: 'hot_standby_feedback'
        value:  'on'
