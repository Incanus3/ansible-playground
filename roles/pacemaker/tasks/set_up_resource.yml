---
# NOTA BENE: all pcs commands need to be run on only one host, use
# `when: inventory_hostname == hosts_in_cluster[0]` to achieve that

# TODO: check whether we can add mask suffix after upgrade
- name: define IP resource {{ resource.name }}
  command: >-
    pcs -f {{ cib_file_path }} resource create {{ resource.name }} ocf:heartbeat:IPaddr2
    ip={{           resource.address | ipaddr('address') }}
    cidr_netmask={{ resource.address | ipaddr('prefix')  }}
    op monitor interval=30s
  when: resource.type | lower == 'ip' and inventory_hostname == hosts_in_cluster[0]

- block:
    - name: disable and stop nginx - will be managed by pcm
      service: name=nginx state=stopped enabled=false

    - name: define nginx resource {{ resource.name }}
      command: >-
        pcs -f {{ cib_file_path }} resource create {{ resource.name }} ocf:heartbeat:nginx
        configfile=/etc/nginx/nginx.conf
        op monitor interval=20s
      when: inventory_hostname == hosts_in_cluster[0]
  when: resource.type | lower == 'nginx'

- block:
    - name: get postgresql version
      command: psql --version
      register: psql_version
      changed_when: false

    - name: set postgresql_version variable
      set_fact:
        postgresql_version: "{{ psql_version.stdout | split | nth(3) | split('.') | first }}"

    - name: ensure pg_stat_tmp run directory
      lineinfile:
        path: /etc/tmpfiles.d/postgresql.conf
        line: d {{ item }} 0700 {{ postgresql_user }} {{ postgresql_group }} - -
        create: true
      with_items:
        - "{{ postgresql_run_dir      }}"
        - "{{ postgresql_stat_tmp_dir }}"
      vars:
        postgresql_stat_tmp_dir: "{{ postgresql_run_dir }}/{{ postgresql_version }}-{{ postgresql_cluster }}.pg_stat_tmp"

    - block:
        - name: create recovery.conf template
          copy:
            dest: "{{ postgresql_recovery_template }}"
            content: |
              standby_mode = on
              restore_command = '{{ postgresql_restore_command | trim }}'
              primary_conninfo = '{{ conninfo | trim }}'
              recovery_target_timeline = 'latest'
            owner: postgres
            group: postgres
            mode: 0640
          when: postgresql_version | int < 12

        - name: create postgresql.auto.conf file
          copy:
            dest: "{{ postgresql_data_dir }}/postgresql.auto.conf"
            content: |
              restore_command = '{{ postgresql_restore_command | trim }}'
              primary_conninfo = '{{ conninfo | trim }}'
              recovery_target_timeline = 'latest'
          when: postgresql_version | int >= 12

      vars:
        conninfo: >
          host=''{{           resource.haIP                   }}''
          port={{             postgresql_port                 }}
          user={{             postgresql_replication_user     }}
          password=''{{       postgresql_replication_password }}''
          application_name={{ inventory_hostname              }}

    - name: disable and stop postgres - will be managed by pcm
      service: name=postgresql state=stopped enabled=false

    - name: prevent postgres from being stared by systemd
      lineinfile:
        path: "{{ postgresql_conf_dir }}/start.conf"
        line: disabled
        regex: '^(auto|manual|disabled)'

    - name: enable ipv4 non-local binding
      sysctl:
        name: net.ipv4.ip_nonlocal_bind
        value: '1'
        sysctl_file: /etc/sysctl.d/99-custom.conf

    - name: define postgres-ha resource {{ resource.name }}
      command: >-
        pcs -f {{ cib_file_path }} resource create {{ resource.name }} ocf:heartbeat:pgsqlms
        pghost="{{ postgresql_run_dir }}"
        bindir="{{ postgresql_bin_dir }}"
        pgdata="{{ postgresql_conf_dir }}"
        datadir="{{ postgresql_data_dir }}"
        {% if postgresql_version | int < 12 %}
        recovery_template="{{ postgresql_recovery_template }}"
        {% endif %}
        op start timeout=60s
        op stop timeout=60s
        op promote timeout=30s
        op demote timeout=120s
        op monitor interval=15s timeout=10s role="Master"
        op monitor interval=16s timeout=10s role="Slave"
        op notify timeout=60s
      when: inventory_hostname == hosts_in_cluster[0]

  when: resource.type | lower == 'postgres-ha'

- name: define clone resource for {{ resource.name }}
  command: >-
    pcs -f {{ cib_file_path }} resource
    {% if before_0_10 %}
    master {{ resource.name ~ '-clone' }} {{ resource.name }}
    {% else %}
    promotable {{ resource.name }}
    {% endif %}
    {% if before_0_10 %}master{% else %}promoted{% endif %}-max=1
    notify=true
  when: inventory_hostname == hosts_in_cluster[0] and resource.promotable | default(False)
