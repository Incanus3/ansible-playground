---
- set_fact:
    hosts_with_role:
      "{{ groups[cluster_role_group] }}"
    hosts_in_network_group:
      "{{ hostvars | dict2items
        | selectattr('value.network_group', 'eq', cluster_network_group)
        | map(attribute = 'key') | list }}"
- set_fact:
    cluster_name:     "{{ cluster_role_group }}-{{ cluster_network_group }}"
    hosts_in_cluster: "{{ hosts_with_role | intersect(hosts_in_network_group) }}"

- debug:
    msg: |-
      setting up pacemaker for network group {{ cluster_network_group }} and role {{ cluster_role_group }}
      hosts with role: {{ hosts_with_role }}
      hosts in network group: {{ hosts_in_network_group }}
      hosts in cluster: {{ hosts_in_cluster }}

- block:
    - debug:
        msg: |-
          running cluster command for hosts {{ hosts_in_cluster }} on host {{ hosts_in_cluster | first }}
          pcs cluster auth {{ hosts_in_cluster | join(' ') }}
          pcs cluster setup --name "{{ cluster_name }}" {{ hosts_in_cluster | join(' ') }}

    - name: check for existing cluster
      command: pcs status
      register: pcs_status
      failed_when: false
      changed_when: false

    - block:
        - name: authenticate all nodes in cluster with each other
          command: >-
            pcs cluster auth {{ hosts_in_cluster | join(' ') }}
            -u "{{ pacemaker_hacluster_username | default('hacluster') }}"
            -p "{{ pacemaker_hacluster_password }}"
          register: result
          changed_when: result.stdout_lines | reject('search', 'Already authorized') | list

        - name: initialize cluster
          command: pcs cluster setup --name "{{ cluster_name }}" {{ hosts_in_cluster | join(' ') }}

      when: "'Cluster name: ' + cluster_name not in pcs_status.stdout_lines"

    - block:
        - name: list cluster resources
          command: pcs resource show
          register: pcs_resources
          changed_when: false

        - name: define cluster IP
          command: >-
            pcs resource create {{ cluster_ip.name    | default('clusterIP') }} ocf:heartbeat:IPaddr2
            ip={{                  cluster_ip.address | ipaddr('address')    }}
            cidr_netmask={{        cluster_ip.address | ipaddr('prefix')     }}
            op monitor interval=30s
          when: >-
            pcs_resources.stdout_lines | select('match', '^\s*' ~ cluster_ip.name ~ '\s')
              | list | length == 0

      when: cluster_name in pacemaker_cluster_ips
      vars:
        cluster_ip: "{{ pacemaker_cluster_ips[cluster_name] }}"

  when: hosts_in_cluster | length > 1
  delegate_to: "{{ hosts_in_cluster | first }}"
