---
- hosts: all,!localhost
  tags:  always
  pre_tasks:
  - name: gather host facts
    setup: gather_subset=network
    run_once: true
    delegate_to: "{{ item }}"
    delegate_facts: true
    with_items: "{{ groups.all }}"
    when: not skip_setup | default(False)

  - name: ensure network_group is defined for all hosts
    set_fact:
      network_group: null
    when: network_group is not defined

  - name: set network group variables
    set_fact:
      my_network_group:
        "{{ hostvars[inventory_hostname]['network_group'] }}"
      hosts_in_my_group:
        "{{ hostvars | dict2items
          | selectattr('value.network_group', 'eq', hostvars[inventory_hostname]['network_group'])
          | map(attribute = 'key') | list }}"
      network_group_names:
        "{{ groups.all | map('extract', hostvars, ['network_group']) | list | unique }}"


- hosts: all
  roles:
    - { role: basic_setup, tags: basic-setup }
    - { role: sshd,        tags: sshd        }


- hosts: db
  roles:
    - role: postgres_setup
      tags: postgres-setup
      vars:
        # FIXME: when this is set to stopped, users and databases aren't created
        # - we could stop and disable the service in the pacemaker role,
        #   but that would break when the postgres-setup role was run again
        # postgresql_service_state: started

        # also, restart postgresql handler ignores this variable
        postgresql_service_state: stopped
        postgresql_service_enabled: false
        postgresql_allowed_clients: "{{ groups.app }}"

  pre_tasks:
    - set_fact:
        postgresql_additional_listen_addresses:
          "{{ postgresql_additional_listen_addresses | default([]) + [postgresql_master_ip | ipaddr('address')] }}"
      when: postgresql_master_ip is defined
      tags: postgres-setup

    - name: create backups directory
      file:
        path: "{{ postgresql_backups_dir }}"
        state: directory
        group: postgres
        mode: 0770
      tags: postgres-setup
      become: true

  post_tasks:
    - become: yes
      become_user: postgres
      tags: create-db
      block:
        - name: create test db user
          postgresql_user: name=test password=test
        - name: create test db
          postgresql_db:   name=test owner=test


- hosts:  app
  tags:   nginx-setup
  roles: [nginx_setup]
  become: true

  post_tasks:
    - name: create deploy user
      user:
        name:     "{{ deploy_user }}"
        password: "{{ deploy_user_pass | password_hash('sha512') }}"
        shell:    "{{ deploy_user_shell }}"
        update_password: on_create
    - name: create directory for test page
      file:
        state: directory
        path: "{{ deploy_dir }}/test-app"
        group: www-data
        mode: 0750
    - name: create apache test page
      copy:
        dest: "{{ deploy_dir }}/test-app/index.html"
        content: |
          <html>
            <body>My Test Site - {{ ansible_host }}</body>
          </html>
        group: www-data
        mode: 0640
    - name: create test page vhost config
      copy:
        dest: /etc/nginx/sites-available/test-app
        content: |
          server {
            listen 80;
            root {{ deploy_dir }}/test-app;
            index index.html;
          }
    - name: enable test page vhost
      file:
        state: link
        src:  /etc/nginx/sites-available/test-app
        dest: /etc/nginx/sites-enabled/test-app
      notify: restart nginx


# - hosts: app
#   roles:
#     - role: geerlingguy.ruby
#       tags: ruby-setup
#       become: true
#       vars:
#         ruby_version: 2.7.0
#         ruby_download_url: http://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.0.tar.gz
#         ruby_install_from_source: true

#     - role: db_tester
#       tags: db-tester
