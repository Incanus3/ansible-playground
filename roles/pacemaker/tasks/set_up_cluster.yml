---
- set_fact:
    hosts_with_role:
      "{{ groups[cluster.role_group] }}"
    hosts_in_network_group:
      "{{ hostvars | dict2items
        | selectattr('value.network_group', 'eq', cluster.network_group)
        | map(attribute = 'key') | list }}"
- set_fact:
    hosts_in_cluster: "{{ hosts_with_role | intersect(hosts_in_network_group) }}"

- block:
    - debug:
        msg: |-
          setting up pacemaker for network group {{ cluster.network_group }} and role {{ cluster.role_group }}
          hosts with role: {{ hosts_with_role }}
          hosts in network group: {{ hosts_in_network_group }}
          hosts in cluster: {{ hosts_in_cluster }}

    - name: check for existing cluster
      command: pcs status
      register: pcs_status
      failed_when: false
      changed_when: false

    - block:
        - name: authenticate all nodes in cluster with each other
          command: >-
            pcs cluster auth {{ hosts_in_cluster | join(' ') }}
            -u "{{ pacemaker_hacluster_username | default('hacluster') }}"
            -p "{{ pacemaker_hacluster_password }}"
          register: result
          changed_when: result.stdout_lines | reject('search', 'Already authorized') | list

        - name: initialize cluster
          command: pcs cluster setup --name "{{ cluster.name }}" {{ hosts_in_cluster | join(' ') }}

        - name: start cluster
          command: pcs cluster start --all

        - name: disable fencing (for now)
          command: pcs property set stonith-enabled=false
          retries: 3
          delay: 1
          register: result
          until: result.rc == 0

      when: "'Cluster name: ' + cluster.name not in pcs_status.stdout_lines"

    - name: get existing resources
      command: pcs resource show
      register: pcs_resources
      changed_when: false

    - set_fact:
        existing_cluster_resources: "{{ pcs_resources.stdout_lines | map('split') | map('first') | list }}"

    - include_tasks: set_up_resource.yml
      when: resource.name not in existing_cluster_resources
      loop: "{{ cluster.resources }}"
      loop_control:
        loop_var: resource

  when: hosts_in_cluster | length > 1
  delegate_to: "{{ hosts_in_cluster | first }}"
